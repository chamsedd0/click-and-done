rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user has admin role
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user is the owner of a document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if user is a collaborator
    function isCollaborator(collaboratorIds) {
      return isAuthenticated() && 
        collaboratorIds != null && 
        request.auth.uid in collaboratorIds;
    }
    
    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
    }
    
    // Website Requests collection rules
    match /websiteRequests/{requestId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        isCollaborator(resource.data.collaboratorIds) || 
        isAdmin()
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        isCollaborator(resource.data.collaboratorIds) || 
        isAdmin()
      );
      allow delete: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
    }
    
    // Feedback collection rules
    match /feedback/{feedbackId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        isAdmin()
      );
      allow delete: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
    }
    
    // Reviews collection rules
    match /reviews/{reviewId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
    }
    
    // Payments collection rules
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        isAdmin()
      );
      allow create: if isAuthenticated();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Files collection rules
    match /files/{fileId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        isAdmin() || 
        exists(/databases/$(database)/documents/websiteRequests/$(resource.data.requestId)) && (
          isOwner(get(/databases/$(database)/documents/websiteRequests/$(resource.data.requestId)).data.userId) ||
          isCollaborator(get(/databases/$(database)/documents/websiteRequests/$(resource.data.requestId)).data.collaboratorIds)
        )
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow delete: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
    }
    
    // Notifications collection rules
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() || isAdmin();
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
    }
  }
} 